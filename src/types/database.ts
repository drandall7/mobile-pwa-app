// Activity types enum
export enum ActivityType {
  RUN = "run",
  BIKE = "bike", 
  WALK = "walk",
  SWIM = "swim",
  HIKE = "hike",
  GYM = "gym",
  YOGA = "yoga",
  PILATES = "pilates",
  CROSSFIT = "crossfit",
  OTHER = "other"
}

// Geographic point type for PostGIS coordinates
export interface GeoPoint {
  type: "Point";
  coordinates: [number, number]; // [longitude, latitude]
}

// Main User type representing a row from the users table
export interface User {
  id: string; // UUID
  phone_number: string; // E.164 format, required
  email: string | null; // Optional
  name: string; // Required
  activity_preferences: ActivityType[]; // Array of activity types
  pace_range_min: number | null; // Minutes per mile, optional
  pace_range_max: number | null; // Minutes per mile, optional
  home_location_coords: GeoPoint | null; // PostGIS geography point, optional
  home_location_name: string | null; // Human-readable location, optional
  created_at: string; // ISO timestamp string
  updated_at: string; // ISO timestamp string
}

// Type for inserting new users (all required fields + optional fields)
export interface UserInsert {
  id?: string; // Optional, will be auto-generated if not provided
  phone_number: string; // Required
  email?: string | null; // Optional
  name: string; // Required
  activity_preferences?: ActivityType[]; // Optional, defaults to empty array
  pace_range_min?: number | null; // Optional
  pace_range_max?: number | null; // Optional
  home_location_coords?: GeoPoint | null; // Optional
  home_location_name?: string | null; // Optional
  created_at?: string; // Optional, will be auto-generated
  updated_at?: string; // Optional, will be auto-generated
}

// Type for updating existing users (all fields optional except id)
export interface UserUpdate {
  id?: string; // Usually not updated, but included for completeness
  phone_number?: string; // Optional update
  email?: string | null; // Optional update (can be set to null)
  name?: string; // Optional update
  activity_preferences?: ActivityType[]; // Optional update
  pace_range_min?: number | null; // Optional update (can be set to null)
  pace_range_max?: number | null; // Optional update (can be set to null)
  home_location_coords?: GeoPoint | null; // Optional update (can be set to null)
  home_location_name?: string | null; // Optional update (can be set to null)
  created_at?: string; // Usually not updated
  updated_at?: string; // Usually not updated (auto-generated by trigger)
}

// Type for user profile creation (minimal required fields)
export interface UserProfileCreate {
  phone_number: string;
  name: string;
  email?: string;
  activity_preferences?: ActivityType[];
}

// Type for user profile updates (common fields users can update)
export interface UserProfileUpdate {
  name?: string;
  email?: string | null;
  activity_preferences?: ActivityType[];
  pace_range_min?: number | null;
  pace_range_max?: number | null;
  home_location_coords?: GeoPoint | null;
  home_location_name?: string | null;
}

// Type for user search/filtering
export interface UserSearchFilters {
  activity_preferences?: ActivityType[];
  pace_range_min?: number;
  pace_range_max?: number;
  location?: {
    coords: GeoPoint;
    radius_meters: number;
  };
}

// Type for user search results with distance
export interface UserSearchResult extends Omit<User, 'home_location_coords'> {
  home_location_coords: GeoPoint | null;
  distance_meters?: number; // Only present when searching by location
}

// Type for user authentication context
export interface UserAuth {
  id: string;
  phone_number: string;
  email: string | null;
  name: string;
}

// Type for user preferences (subset of user data for forms)
export interface UserPreferences {
  activity_preferences: ActivityType[];
  pace_range_min: number | null;
  pace_range_max: number | null;
  home_location_coords: GeoPoint | null;
  home_location_name: string | null;
}

// Type guards for runtime type checking
export const isActivityType = (value: string): value is ActivityType => {
  return Object.values(ActivityType).includes(value as ActivityType);
};

export const isValidPhoneNumber = (phone: string): boolean => {
  // E.164 format validation: + followed by 1-15 digits
  const e164Regex = /^\+[1-9]\d{1,14}$/;
  return e164Regex.test(phone);
};

export const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/;
  return emailRegex.test(email);
};

// Utility types for form handling
export type UserFormData = Omit<UserInsert, 'id' | 'created_at' | 'updated_at'>;

export type UserFormErrors = Partial<Record<keyof UserFormData, string>>;

// Constants for validation
export const VALIDATION_LIMITS = {
  NAME_MIN_LENGTH: 1,
  NAME_MAX_LENGTH: 100,
  PHONE_MAX_LENGTH: 16, // E.164 format limit
  EMAIL_MAX_LENGTH: 255,
  LOCATION_NAME_MAX_LENGTH: 200,
  PACE_MIN: 3, // 3 minutes per mile (very fast)
  PACE_MAX: 20, // 20 minutes per mile (very slow)
} as const;

// Helper function to create GeoPoint from lat/lng
export const createGeoPoint = (latitude: number, longitude: number): GeoPoint => ({
  type: "Point",
  coordinates: [longitude, latitude] // PostGIS expects [lng, lat]
});

// Helper function to extract lat/lng from GeoPoint
export const getLatLngFromGeoPoint = (geoPoint: GeoPoint): { lat: number; lng: number } => ({
  lat: geoPoint.coordinates[1],
  lng: geoPoint.coordinates[0]
});

// Helper function to format phone number for display
export const formatPhoneNumber = (phone: string): string => {
  // Convert E.164 to readable format
  // +19195551234 -> (919) 555-1234
  const cleaned = phone.replace(/\D/g, '');
  if (cleaned.length === 11 && cleaned.startsWith('1')) {
    const areaCode = cleaned.slice(1, 4);
    const exchange = cleaned.slice(4, 7);
    const number = cleaned.slice(7);
    return `(${areaCode}) ${exchange}-${number}`;
  }
  return phone; // Return original if can't format
};

// Helper function to parse phone number to E.164
export const parsePhoneNumber = (phone: string): string => {
  const cleaned = phone.replace(/\D/g, '');
  if (cleaned.length === 10) {
    return `+1${cleaned}`; // Assume US number
  } else if (cleaned.length === 11 && cleaned.startsWith('1')) {
    return `+${cleaned}`;
  }
  return phone; // Return original if can't parse
};
